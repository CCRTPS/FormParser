
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author CCRPTS
 */
public class Main extends javax.swing.JFrame {

    private File inputFile;
    private File outputFile;

    /**
     * Creates new form Main
     */
    public Main() throws IOException, FileNotFoundException, ClassNotFoundException {
        initComponents();
        loadTable();
    }

    
    //Clear the label table and reload it with values from the label file
    private void loadTable() throws IOException, FileNotFoundException, ClassNotFoundException {
        ArrayList<Label> labels = Tools.deserializeLabels();

        DefaultTableModel model = (DefaultTableModel) labelsTable.getModel();

        //Clear table
        if (labelsTable.getRowCount() > 0) {
            for (int i = labelsTable.getRowCount() - 1; i > -1; i--) {
                model.removeRow(i);
            }
        }

        //Add all labels
        for (Label l : labels) {
            String exl = "";
            if (l.getExclusions().length > 0) {
                for (String s : l.getExclusions()) {
                    exl += s + ", ";
                }
                exl = exl.substring(0, exl.length() - 2);
            }
            model.addRow(new Object[]{l.getLabel(), l.getDescription(), exl});
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        inputFileChooser = new javax.swing.JFileChooser();
        outputFileChooser = new javax.swing.JFileChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        labelsTable = new javax.swing.JTable();
        removeLabelButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        add_labelTextBox = new javax.swing.JTextField();
        add_descriptionTextBox = new javax.swing.JTextField();
        add_exclusionsTextBox = new javax.swing.JTextField();
        addLabelButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        inputFileTextBox = new javax.swing.JTextField();
        browseInputFileButton = new javax.swing.JButton();
        browseOutputFileButton = new javax.swing.JButton();
        outputFileTextBox = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel6 = new javax.swing.JLabel();
        generateHrCheckBox = new javax.swing.JCheckBox();
        fieldDelimiterTextBox = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        entryDelimiterTextBox = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        downloadImagesCheckBox = new javax.swing.JCheckBox();
        readUppercaseCheckBox = new javax.swing.JCheckBox();
        parseButton = new javax.swing.JButton();

        inputFileChooser.setCurrentDirectory(new File(System.getProperty("user.dir")));
        inputFileChooser.setDialogTitle("Set input file");

        outputFileChooser.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);
        outputFileChooser.setCurrentDirectory(new File(System.getProperty("user.dir")));
        outputFileChooser.setDialogTitle("Set Output File");
        outputFileChooser.setFileFilter(null);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        labelsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Label", "Description", "Exclusions"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        labelsTable.setColumnSelectionAllowed(true);
        labelsTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(labelsTable);
        labelsTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        removeLabelButton.setText("Remove Selected");
        removeLabelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeLabelButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Label:");

        jLabel2.setText("Description:");

        jLabel3.setText("Exclusions:");

        addLabelButton.setText("Add New");
        addLabelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addLabelButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("Input File:");

        browseInputFileButton.setText("...");
        browseInputFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseInputFileButtonActionPerformed(evt);
            }
        });

        browseOutputFileButton.setText("...");
        browseOutputFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseOutputFileButtonActionPerformed(evt);
            }
        });

        jLabel5.setText("Output File:");

        jLabel6.setText("Options:");

        generateHrCheckBox.setSelected(true);
        generateHrCheckBox.setText("Generate Human Readable File");

        fieldDelimiterTextBox.setText(":");

        jLabel7.setText("Field Delimiter:");

        entryDelimiterTextBox.setText("--------");

        jLabel8.setText("Entry Delimiter:");

        downloadImagesCheckBox.setText("Try to download images");

        readUppercaseCheckBox.setText("Read fields to uppercase");

        parseButton.setText("Parse");
        parseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                parseButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(removeLabelButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(add_labelTextBox)
                            .addComponent(add_descriptionTextBox, javax.swing.GroupLayout.DEFAULT_SIZE, 181, Short.MAX_VALUE)
                            .addComponent(add_exclusionsTextBox, javax.swing.GroupLayout.DEFAULT_SIZE, 181, Short.MAX_VALUE)))
                    .addComponent(addLabelButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(outputFileTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(browseOutputFileButton))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator2))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel8)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(entryDelimiterTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addComponent(jLabel7)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(fieldDelimiterTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(generateHrCheckBox)
                                        .addComponent(downloadImagesCheckBox)
                                        .addComponent(readUppercaseCheckBox)))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(inputFileTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(browseInputFileButton))
                            .addComponent(parseButton, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeLabelButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(inputFileTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(browseInputFileButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(browseOutputFileButton)
                            .addComponent(outputFileTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addGap(10, 10, 10)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(generateHrCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(downloadImagesCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(readUppercaseCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fieldDelimiterTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(entryDelimiterTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(add_labelTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(add_descriptionTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(add_exclusionsTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addLabelButton)
                        .addGap(0, 4, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(parseButton)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addLabelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addLabelButtonActionPerformed
        String label = add_labelTextBox.getText();
        String description = add_descriptionTextBox.getText();
        String[] exclusions = add_exclusionsTextBox.getText().trim().split(",");

        if (exclusions.length == 1 && exclusions[0].equals("")) {
            exclusions = new String[0];
        }

        //Make all exclusions same case
        for (int i = 0; i < exclusions.length; i++) {
            exclusions[i] = exclusions[i].toLowerCase();
        }

        //check to make sure there are no missing values
        if (label.equals("") || description.equals("")) {
            JOptionPane.showMessageDialog(rootPane, "One or more text fields were empty!");
            return;
        }

        Label newLabel = new Label(label, description, exclusions);

        ArrayList<Label> labels;
        try {
            labels = Tools.deserializeLabels();
            labels.add(newLabel);
            Tools.serializeLables(labels);

            add_labelTextBox.setText("");
            add_exclusionsTextBox.setText("");
            add_descriptionTextBox.setText("");

            loadTable();
        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(rootPane, "An error occurred while reading or writing to the labels file!");
            System.out.println(ex.getMessage());
        } catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_addLabelButtonActionPerformed

    private void removeLabelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeLabelButtonActionPerformed

        try {
            ArrayList<Label> labels = Tools.deserializeLabels();
            String label = (String) labelsTable.getModel().getValueAt(labelsTable.getSelectedRow(), 0);
            for (int i = 0; i < labels.size(); i++) {
                if (labels.get(i).getLabel().equals(label)) {
                    labels.remove(i);
                    break;
                }
            }
            Tools.serializeLables(labels);
            loadTable();

        } catch (IOException | ClassNotFoundException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_removeLabelButtonActionPerformed

    private void browseInputFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseInputFileButtonActionPerformed
        inputFileChooser.showDialog(this, "Select");
        inputFile = inputFileChooser.getSelectedFile();
        try {
            inputFileTextBox.setText(inputFile.getCanonicalPath());
        } catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_browseInputFileButtonActionPerformed

    private void browseOutputFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseOutputFileButtonActionPerformed
        outputFileChooser.showDialog(this, "Select");
        outputFile = outputFileChooser.getSelectedFile();
        try {
            outputFileTextBox.setText(outputFile.getCanonicalPath());
        } catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_browseOutputFileButtonActionPerformed

    private void parseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_parseButtonActionPerformed
        if (inputFile == null || outputFile == null) {
            JOptionPane.showMessageDialog(rootPane, "Please select both input and output files!");
            return;
        }
        try {
            Tools.parse(inputFile, outputFile, generateHrCheckBox.isSelected(), downloadImagesCheckBox.isSelected(), readUppercaseCheckBox.isSelected(), fieldDelimiterTextBox.getText(), entryDelimiterTextBox.getText());
        } catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_parseButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Main().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addLabelButton;
    private javax.swing.JTextField add_descriptionTextBox;
    private javax.swing.JTextField add_exclusionsTextBox;
    private javax.swing.JTextField add_labelTextBox;
    private javax.swing.JButton browseInputFileButton;
    private javax.swing.JButton browseOutputFileButton;
    private javax.swing.JCheckBox downloadImagesCheckBox;
    private javax.swing.JTextField entryDelimiterTextBox;
    private javax.swing.JTextField fieldDelimiterTextBox;
    private javax.swing.JCheckBox generateHrCheckBox;
    private javax.swing.JFileChooser inputFileChooser;
    private javax.swing.JTextField inputFileTextBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTable labelsTable;
    private javax.swing.JFileChooser outputFileChooser;
    private javax.swing.JTextField outputFileTextBox;
    private javax.swing.JButton parseButton;
    private javax.swing.JCheckBox readUppercaseCheckBox;
    private javax.swing.JButton removeLabelButton;
    // End of variables declaration//GEN-END:variables
}
